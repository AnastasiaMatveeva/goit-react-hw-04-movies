{"version":3,"sources":["views/ReviewsView.js"],"names":["ReviewsView","movieId","useState","reviewsList","setReviewsList","useEffect","fetchMoviesAPI","then","data","results","length","map","review","author","content","id"],"mappings":"0NAIe,SAASA,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACpC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAQA,OANAC,qBAAU,WACRC,IAA4BL,GAASM,MAAK,SAACC,GACzCJ,EAAeI,EAAKC,cAErB,CAACR,IAGF,mCACGE,EAAYO,OAAS,EACpB,mCACE,6BACGP,EAAYQ,KAAI,SAACC,GAAD,OACf,+BACE,6BAAKA,EAAOC,SACZ,4BAAID,EAAOE,YAFJF,EAAOG,WAQtB","file":"static/js/review-view.f0470c7e.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as fetchMoviesAPI from \"../service/fetchMoviesAPI.js\";\r\n\r\nexport default function ReviewsView({ movieId }) {\r\n  const [reviewsList, setReviewsList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchMoviesAPI.fetchReviews(movieId).then((data) => {\r\n      setReviewsList(data.results);\r\n    });\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {reviewsList.length > 0 ? (\r\n        <>\r\n          <ul>\r\n            {reviewsList.map((review) => (\r\n              <li key={review.id}>\r\n                <h4>{review.author}</h4>\r\n                <p>{review.content}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      ) : (\r\n        <p> No results</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nReviewsView.propTypes = {\r\n  movieId: PropTypes.string.isRequired,\r\n};\r\n"],"sourceRoot":""}